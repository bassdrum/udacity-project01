{"version":3,"sources":["master.js","_modules.validation.js","_registration.js","_createEvent.js"],"names":["UI","$","Module","element","options","this","_name","moduleName","_defaults","fn","defaults","extend","elementType","type","$element","$parent","$helpBlock","$messagesList","everValue","init","prototype","buildDom","buildCache","bindEvents","$ul","key","messages","password","append","closest","siblings","find","module","on","val","isValid","cleanUp","showError","processPasswordMessages","checkValidity","isValid_password","minLength","upper","lower","number","special","result","conditions","test","setCustomValidity","message","getErrorMessage","addClass","removeClass","html","states","validity","formatMessage","replace","attr","counter","forceValidation","option","each","$this","data","valueMissing","tooShort","minlength","jQuery","registration","$form","$name","$email","$pwd","validator","typeMismatch","e","preventDefault","console","log","createEvent","document","ready"],"mappings":"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","file":"master.js","sourcesContent":["var UI = {};\n\n// DESCRIPTION\n// ============================================================\n// validator manages validation process on a field level.\n// it means, that you can init it on a specific field\n// pass options (messages), \n// set constraints using html attributes (see Constraint Validation API)\n// and enjoy the process\n//\n// important: validator supports slightly different logic for regular fields and password* fields\n// * password validation options are hardcoded\n\n// USAGE\n// ============================================================\n// $('#regPwd').validator(options);\n\n// OPTIONS\n// ============================================================\n// take a look at module's default options\n// it is allowed to redefine any predefined error messages\n// $('#regName').validator({\n//      messages: {\n//      valueMissing: 'We really need your name, mate',\n//      tooShort: 'The name is too short, bro (at least %N% characters)'\n//    }\n//  });\n\n// GENERATED MARKUP\n// ============================================================\n// in case of password field\n// module generates additional markup (to provide hints)\n// <ul class=\"list-unstyled\">\n//   <li><span class=\"glyphicon glyphicon-ban-circle\"></span> Hint text</li>\n//   ...\n//   <li><span class=\"glyphicon glyphicon-ban-circle\"></span> Hint text</li>\n// </ul>  \n\n// API\n// ============================================================\n// you can force validation on a field\n// $('#regName').validator('forceValidation');\n\n\n+function ($) {\n  'use strict';\n  \n  var moduleName = 'validator';\n\n  function Module (element, options) {\n    this.element        = element;\n    this._name          = moduleName;\n    this._defaults      = $.fn[moduleName].defaults;\n    this.options        = $.extend(true, {}, this._defaults, options );\n    this.elementType    = this.element.type;\n    this.$element       = null;\n    this.$parent        = null;\n    this.$helpBlock     = null;\n    this.$messagesList  = null; // used only for 'password' fields\n    this.everValue      = null;\n    \n    this.init();\n  }\n  \n  Module.prototype.init = function () {\n    this.buildDom();\n    this.buildCache();\n    this.bindEvents();\n  };\n  \n  Module.prototype.buildDom = function() {\n    if (this.elementType == 'password') {\n      var $ul = $('<ul class=\"list-unstyled\"></ul>');\n      \n      for (var key in this.options.messages.password) {\n        var element = '<li><span class=\"glyphicon glyphicon-ban-circle\"></span> ' \n                      + this.options.messages.password[key] \n                      + '</li>';\n        \n        $ul.append(element);\n      }\n      \n      $(this.element).closest('div').append($ul);\n    }\n  };\n  \n  Module.prototype.buildCache = function() {\n    this.$element   = $(this.element);\n    this.$parent    = this.$element.closest('.form-group');\n    this.$helpBlock = this.$element.siblings('.help-block');\n    this.$messagesList = this.$parent.find('ul.list-unstyled');\n  };\n  \n  Module.prototype.bindEvents = function() {\n    var module = this;\n    \n    module.$element.on('focus' + '.' + module._name, function() {\n      if ( !module.everValue ) {\n        module.everValue = module.$element.val();\n      }\n    });\n    \n    module.$element.on('input' + '.' + module._name, function() {\n      if ( module.isValid() ) {\n        module.cleanUp();\n      } else if ( module.everValue ) {\n        module.showError();\n      }\n    });\n    \n    module.$element.on('blur' + '.' +  module._name, function() {\n      if ( !module.$element.val() && !module.everValue ) {\n        return;\n      }\n      \n      if ( module.isValid() ) {\n        module.cleanUp();\n      } else {\n        module.showError();\n      }\n    });\n    \n    module.$element.on('input' + '.' + module._name + ', ' + 'blur' + '.' +  module._name , function() {\n      if ( module.elementType == 'password' ) {\n        module.processPasswordMessages();\n      }\n    });\n  };\n  \n  Module.prototype.isValid = function() {\n    if ( this.elementType != 'password' ) {\n      return this.element.checkValidity();\n    }\n    \n    return this.isValid_password().isValid;\n  };\n  \n  Module.prototype.isValid_password = function() {\n    var minLength = /^[\\s\\S]{8,}$/;\n    var upper = /[A-Z]/;\n    var lower = /[a-z]/;\n    var number = /[0-9]/;\n    var special = /[ !\"#$%&'()*+,\\-./:;<=>?@[\\\\\\]^_`{|}~]/;\n    var password = this.$element.val();\n    var result = {};\n    \n    result.conditions = {};\n    result.isValid = true;\n    \n    result.conditions.minLength = minLength.test(password) ? true : false;\n    result.conditions.upper = upper.test(password) ? true : false;\n    result.conditions.lower = lower.test(password) ? true : false;\n    result.conditions.number = number.test(password) ? true : false;\n    result.conditions.special = special.test(password) ? true : false;\n    \n    for (var key in result.conditions) {\n      if( result.conditions[key] === false ) result.isValid = false;\n    }\n    \n    if (result.isValid) {\n      this.element.setCustomValidity('');\n    } else {\n      this.element.setCustomValidity('invalid');\n    }\n    \n    return result;\n  };\n  \n  Module.prototype.showError = function() {\n    var message = this.getErrorMessage();\n    \n    this.$parent.addClass('has-error');\n    this.$helpBlock.removeClass('hidden').html(message);\n  };\n  \n  Module.prototype.cleanUp = function() {\n    this.$helpBlock.addClass('hidden').html();\n    this.$parent.removeClass('has-error');\n  };\n  \n  Module.prototype.getErrorMessage = function() {\n    var states = this.element.validity;\n    \n    for (var key in states) {\n      if ( states[key] ) {\n        return this.formatMessage(key);\n      }\n    }\n    \n    return false;\n  };\n  \n  Module.prototype.formatMessage = function(key) {\n    var message = this.options.messages[key];\n    \n    if (key == 'tooShort') {\n      message = message.replace('%N%', this.$element.attr('minlength'));\n    }\n    \n    return message;\n  };\n  \n  Module.prototype.processPasswordMessages = function() {\n    var result = this.isValid_password();\n    var counter = 0;\n    \n    for (var key in result.conditions) {\n      counter++;\n      \n      if (result.conditions[key]) {\n        this.$messagesList\n          .find('li:nth-child(' + counter + ')')\n          .addClass('text-success strong')\n          .find('.glyphicon')\n          .removeClass('glyphicon-ban-circle')\n          .addClass('glyphicon-ok-circle');\n      } else {\n        this.$messagesList\n          .find('li:nth-child(' + counter + ')')\n          .removeClass('text-success')\n          .find('.glyphicon')\n          .removeClass('glyphicon-ok-circle')\n          .addClass('glyphicon-ban-circle');\n      }\n    }\n  }\n  \n  // API methods\n  Module.prototype.forceValidation = function() {\n    if ( this.isValid() ) {\n      this.cleanUp();\n    } else {\n      this.showError();\n    }\n    \n    if ( this.elementType == 'password' ) {\n      this.processPasswordMessages();\n    }\n    \n    return false;\n  }\n  \n  $.fn[moduleName] = function (option) {\n    return this.each(function () {\n      var $this   = $(this);\n      var data    = $this.data( 'module_' + moduleName );\n      var options = $.extend({}, $.fn[moduleName].defaults, $this.data(), typeof option == 'object' && option);\n      \n      if (!data) $this.data( 'module_' + moduleName, ( data = new Module(this, options) ) );\n      if (typeof option == 'string') data[option]();\n    });\n  };\n\n  $.fn[moduleName].defaults = {\n    messages: {\n      valueMissing: 'The field is required',\n      tooShort: 'At least %N% characters',\n      password: { \n        minlength: 'At least 8 characters long', // todo: get rid of hardcoded parameters\n        upper: 'Contains uppercase letters',\n        lower: 'Contains lowercase letters',\n        number: 'Contains numbers',\n        special: 'Contains punctuation'\n      }\n    }\n  };\n\n}(jQuery);\nUI.registration = function() {\n  var $form = $('#registration');\n  var $name = $('#registration-name');\n  var $email = $('#registration-email');\n  var $pwd = $('#registration-pwd');\n  \n  $name.validator({\n    messages: {\n      valueMissing: 'We really need your name, mate',\n      tooShort: 'The name is too short, bro (at least %N% characters)'\n    }\n  });\n  \n  $email.validator({\n    messages: {\n      valueMissing: 'What if it is an emergency?',\n      typeMismatch: 'It doesn\\'t look like a valid email'\n    }\n  });\n  \n  $pwd.validator();\n  \n  $form.on('submit', function(e) {\n    // call force validation\n    $name.validator('forceValidation');\n    $email.validator('forceValidation');\n    $pwd.validator('forceValidation');\n    \n    if ($form[0].checkValidity() === false) {\n      e.preventDefault();\n      console.log('invalid');\n      return false;\n    } else {\n      console.log('valid');\n    }\n  });\n}\nUI.createEvent = function() {\n  var $form = $('#createEvent');\n  var geo = $('#createEvent-geo');\n  \n  \n}\n\n\n$(document).ready(function () {\n  UI.registration();\n  UI.createEvent();\n});","// DESCRIPTION\n// ============================================================\n// validator manages validation process on a field level.\n// it means, that you can init it on a specific field\n// pass options (messages), \n// set constraints using html attributes (see Constraint Validation API)\n// and enjoy the process\n//\n// important: validator supports slightly different logic for regular fields and password* fields\n// * password validation options are hardcoded\n\n// USAGE\n// ============================================================\n// $('#regPwd').validator(options);\n\n// OPTIONS\n// ============================================================\n// take a look at module's default options\n// it is allowed to redefine any predefined error messages\n// $('#regName').validator({\n//      messages: {\n//      valueMissing: 'We really need your name, mate',\n//      tooShort: 'The name is too short, bro (at least %N% characters)'\n//    }\n//  });\n\n// GENERATED MARKUP\n// ============================================================\n// in case of password field\n// module generates additional markup (to provide hints)\n// <ul class=\"list-unstyled\">\n//   <li><span class=\"glyphicon glyphicon-ban-circle\"></span> Hint text</li>\n//   ...\n//   <li><span class=\"glyphicon glyphicon-ban-circle\"></span> Hint text</li>\n// </ul>  \n\n// API\n// ============================================================\n// you can force validation on a field\n// $('#regName').validator('forceValidation');\n\n\n+function ($) {\n  'use strict';\n  \n  var moduleName = 'validator';\n\n  function Module (element, options) {\n    this.element        = element;\n    this._name          = moduleName;\n    this._defaults      = $.fn[moduleName].defaults;\n    this.options        = $.extend(true, {}, this._defaults, options );\n    this.elementType    = this.element.type;\n    this.$element       = null;\n    this.$parent        = null;\n    this.$helpBlock     = null;\n    this.$messagesList  = null; // used only for 'password' fields\n    this.everValue      = null;\n    \n    this.init();\n  }\n  \n  Module.prototype.init = function () {\n    this.buildDom();\n    this.buildCache();\n    this.bindEvents();\n  };\n  \n  Module.prototype.buildDom = function() {\n    if (this.elementType == 'password') {\n      var $ul = $('<ul class=\"list-unstyled\"></ul>');\n      \n      for (var key in this.options.messages.password) {\n        var element = '<li><span class=\"glyphicon glyphicon-ban-circle\"></span> ' \n                      + this.options.messages.password[key] \n                      + '</li>';\n        \n        $ul.append(element);\n      }\n      \n      $(this.element).closest('div').append($ul);\n    }\n  };\n  \n  Module.prototype.buildCache = function() {\n    this.$element   = $(this.element);\n    this.$parent    = this.$element.closest('.form-group');\n    this.$helpBlock = this.$element.siblings('.help-block');\n    this.$messagesList = this.$parent.find('ul.list-unstyled');\n  };\n  \n  Module.prototype.bindEvents = function() {\n    var module = this;\n    \n    module.$element.on('focus' + '.' + module._name, function() {\n      if ( !module.everValue ) {\n        module.everValue = module.$element.val();\n      }\n    });\n    \n    module.$element.on('input' + '.' + module._name, function() {\n      if ( module.isValid() ) {\n        module.cleanUp();\n      } else if ( module.everValue ) {\n        module.showError();\n      }\n    });\n    \n    module.$element.on('blur' + '.' +  module._name, function() {\n      if ( !module.$element.val() && !module.everValue ) {\n        return;\n      }\n      \n      if ( module.isValid() ) {\n        module.cleanUp();\n      } else {\n        module.showError();\n      }\n    });\n    \n    module.$element.on('input' + '.' + module._name + ', ' + 'blur' + '.' +  module._name , function() {\n      if ( module.elementType == 'password' ) {\n        module.processPasswordMessages();\n      }\n    });\n  };\n  \n  Module.prototype.isValid = function() {\n    if ( this.elementType != 'password' ) {\n      return this.element.checkValidity();\n    }\n    \n    return this.isValid_password().isValid;\n  };\n  \n  Module.prototype.isValid_password = function() {\n    var minLength = /^[\\s\\S]{8,}$/;\n    var upper = /[A-Z]/;\n    var lower = /[a-z]/;\n    var number = /[0-9]/;\n    var special = /[ !\"#$%&'()*+,\\-./:;<=>?@[\\\\\\]^_`{|}~]/;\n    var password = this.$element.val();\n    var result = {};\n    \n    result.conditions = {};\n    result.isValid = true;\n    \n    result.conditions.minLength = minLength.test(password) ? true : false;\n    result.conditions.upper = upper.test(password) ? true : false;\n    result.conditions.lower = lower.test(password) ? true : false;\n    result.conditions.number = number.test(password) ? true : false;\n    result.conditions.special = special.test(password) ? true : false;\n    \n    for (var key in result.conditions) {\n      if( result.conditions[key] === false ) result.isValid = false;\n    }\n    \n    if (result.isValid) {\n      this.element.setCustomValidity('');\n    } else {\n      this.element.setCustomValidity('invalid');\n    }\n    \n    return result;\n  };\n  \n  Module.prototype.showError = function() {\n    var message = this.getErrorMessage();\n    \n    this.$parent.addClass('has-error');\n    this.$helpBlock.removeClass('hidden').html(message);\n  };\n  \n  Module.prototype.cleanUp = function() {\n    this.$helpBlock.addClass('hidden').html();\n    this.$parent.removeClass('has-error');\n  };\n  \n  Module.prototype.getErrorMessage = function() {\n    var states = this.element.validity;\n    \n    for (var key in states) {\n      if ( states[key] ) {\n        return this.formatMessage(key);\n      }\n    }\n    \n    return false;\n  };\n  \n  Module.prototype.formatMessage = function(key) {\n    var message = this.options.messages[key];\n    \n    if (key == 'tooShort') {\n      message = message.replace('%N%', this.$element.attr('minlength'));\n    }\n    \n    return message;\n  };\n  \n  Module.prototype.processPasswordMessages = function() {\n    var result = this.isValid_password();\n    var counter = 0;\n    \n    for (var key in result.conditions) {\n      counter++;\n      \n      if (result.conditions[key]) {\n        this.$messagesList\n          .find('li:nth-child(' + counter + ')')\n          .addClass('text-success strong')\n          .find('.glyphicon')\n          .removeClass('glyphicon-ban-circle')\n          .addClass('glyphicon-ok-circle');\n      } else {\n        this.$messagesList\n          .find('li:nth-child(' + counter + ')')\n          .removeClass('text-success')\n          .find('.glyphicon')\n          .removeClass('glyphicon-ok-circle')\n          .addClass('glyphicon-ban-circle');\n      }\n    }\n  }\n  \n  // API methods\n  Module.prototype.forceValidation = function() {\n    if ( this.isValid() ) {\n      this.cleanUp();\n    } else {\n      this.showError();\n    }\n    \n    if ( this.elementType == 'password' ) {\n      this.processPasswordMessages();\n    }\n    \n    return false;\n  }\n  \n  $.fn[moduleName] = function (option) {\n    return this.each(function () {\n      var $this   = $(this);\n      var data    = $this.data( 'module_' + moduleName );\n      var options = $.extend({}, $.fn[moduleName].defaults, $this.data(), typeof option == 'object' && option);\n      \n      if (!data) $this.data( 'module_' + moduleName, ( data = new Module(this, options) ) );\n      if (typeof option == 'string') data[option]();\n    });\n  };\n\n  $.fn[moduleName].defaults = {\n    messages: {\n      valueMissing: 'The field is required',\n      tooShort: 'At least %N% characters',\n      password: { \n        minlength: 'At least 8 characters long', // todo: get rid of hardcoded parameters\n        upper: 'Contains uppercase letters',\n        lower: 'Contains lowercase letters',\n        number: 'Contains numbers',\n        special: 'Contains punctuation'\n      }\n    }\n  };\n\n}(jQuery);","UI.registration = function() {\n  var $form = $('#registration');\n  var $name = $('#registration-name');\n  var $email = $('#registration-email');\n  var $pwd = $('#registration-pwd');\n  \n  $name.validator({\n    messages: {\n      valueMissing: 'We really need your name, mate',\n      tooShort: 'The name is too short, bro (at least %N% characters)'\n    }\n  });\n  \n  $email.validator({\n    messages: {\n      valueMissing: 'What if it is an emergency?',\n      typeMismatch: 'It doesn\\'t look like a valid email'\n    }\n  });\n  \n  $pwd.validator();\n  \n  $form.on('submit', function(e) {\n    // call force validation\n    $name.validator('forceValidation');\n    $email.validator('forceValidation');\n    $pwd.validator('forceValidation');\n    \n    if ($form[0].checkValidity() === false) {\n      e.preventDefault();\n      console.log('invalid');\n      return false;\n    } else {\n      console.log('valid');\n    }\n  });\n}","UI.createEvent = function() {\n  var $form = $('#createEvent');\n  var geo = $('#createEvent-geo');\n  \n  \n}"],"sourceRoot":"/source/"}
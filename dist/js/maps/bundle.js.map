{"version":3,"sources":["_module.validation.js","validation.js"],"names":["$","Module","element","options","this","_name","moduleName","_defaults","fn","defaults","extend","elementType","type","$element","$parent","$helpBlock","$messagesList","everValue","init","prototype","buildDom","buildCache","bindEvents","$ul","key","messages","password","append","closest","siblings","find","module","on","val","processPasswordMessages","isValid","cleanUp","showError","result","validatePassword","counter","conditions","addClass","removeClass","checkValidity","minLength","upper","lower","number","special","test","setCustomValidity","html","message","getErrorMessage","states","validity","formatMessage","replace","attr","option","each","$this","data","valueMissing","tooShort","minlength","jQuery","validate","typeMismatch"],"mappings":"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","file":"bundle.js","sourcesContent":["+function ($) {\n  // как валидировать?\n  // 1. определить способ валидации (зависит от типа поля)\n  // 2. добавить обработчик keyup на поле\n  // 2.1 проверяю валидно ли поле? (вот тут логика валидации будет зависеть от типа поля)\n  // 2.2 если нет, ничего не делаю\n  // 2.3 если да, setCustomValidity() + удаляю has-error (не важно, был он или нет)\n  // 3. добавить обработчик blur \n  // 3.1 поле валидно? (вот тут логика валидации будет зависеть от типа поля)\n  // 3.2 да — ничего не делаю\n  // 3.3 нет - setCustomValidity(false), + добавляю has-error\n  \n  // вторая итерация \n  // научиться обрабатывать больше одной ошибки\n  // 1. получаю объект validity\n  // 2. прохожу по свойствам\n  // 3. нахожу true и сопоставляю с объектом ошибок и текстов уникальным для данного поля\n  // 4. выдаю именно эту ошибку\n  \n  // создаю объект, в котором есть стандартные тексты ошибок для стандартных кейсов\n  // возможно с зависимостью от типа поля\n  // далее при ошибке валидации, я сначала смотрю нет ли объекта с сообщениями об ошибках в параметрах инициализации\n  // если нет, дергаю подходящее сообщение из предопределенного объекта\n  \n  // третья итерация\n  // инициализировать плагин на поле\n  // откуда брать сообщения об ошибке?\n  // оставить в html?\n  \n  \n  // четвертая итерация\n  // усложнить логику валидации\n  // не валидировать поле которое было и осталось пустым\n  // валидировать поле на keyup, если поле уже когда то было отвалидировано в инвалид\n  \n  // пятая итерация\n  // добавить валидацию для пароля\n  \n  // шестая итерация\n  // вынести валидацию на уровень формы\n  \n  // последняя итерация \n  // покрыть код комментариями\n  \n  \n  'use strict';\n  \n  var moduleName = 'validate';\n\n  function Module (element, options) {\n    this.element        = element;\n    this._name          = moduleName;\n    this._defaults      = $.fn[moduleName].defaults;\n    this.options        = $.extend(true, {}, this._defaults, options );\n    this.elementType    = this.element.type;\n    this.$element       = null;\n    this.$parent        = null;\n    this.$helpBlock     = null;\n    this.$messagesList  = null; // used only for 'password' fields\n    this.everValue      = null;\n    \n    \n    this.init();\n  }\n  \n  Module.prototype.init = function () {\n    this.buildDom();\n    this.buildCache();\n    this.bindEvents();\n  };\n  \n  Module.prototype.buildDom = function() {\n    if (this.elementType == 'password') {\n      var $ul = $('<ul class=\"list-unstyled\"></ul>');\n      \n      for (var key in this.options.messages.password) {\n        var element = '<li><span class=\"glyphicon glyphicon-ok-circle\"></span> ' \n                      + this.options.messages.password[key] \n                      + '</li>';\n        \n        $ul.append(element);\n      }\n      \n      $(this.element).closest('.form-group').append($ul);\n    }\n  };\n  \n  Module.prototype.buildCache = function() {\n    this.$element   = $(this.element);\n    this.$parent    = this.$element.closest('.form-group');\n    this.$helpBlock = this.$element.siblings('.help-block');\n    \n    if (this.elementType == 'password') {\n      this.$messagesList = this.$parent.find('ul.list-unstyled');\n    }\n  };\n  \n  Module.prototype.bindEvents = function() {\n    var module = this;\n    \n    module.$element.on('focus' + '.' + module._name, function() {\n      if ( !module.everValue ) {\n        module.everValue = module.$element.val();\n      }\n    });\n    \n    module.$element.on('input' + '.' + module._name, function() {\n      // password\n      if ( module.elementType == 'password' ) {\n        module.processPasswordMessages();\n      }\n      \n      if ( module.isValid() ) {\n        module.cleanUp();\n      } else if( module.everValue ) {\n        module.showError();\n      }\n    });\n    \n    module.$element.on('blur' + '.' +  module._name, function() {\n      // password\n      if ( module.elementType == 'password' ) {\n        module.processPasswordMessages();\n      }\n      \n      if ( !module.$element.val() && !module.everValue ) {\n        return;\n      }\n      \n      if ( module.isValid() ) {\n        module.cleanUp();\n      } else {\n        module.showError();\n      }\n    });\n  };\n  \n  Module.prototype.processPasswordMessages = function() {\n    var result = this.validatePassword();\n    var counter = 0;\n    \n    for (var key in result.conditions) {\n      counter++;\n      \n      if (result.conditions[key]) {\n        this.$messagesList.find('li:nth-child(' + counter + ')').addClass('text-success strong');\n      } else {\n        this.$messagesList.find('li:nth-child(' + counter + ')').removeClass('text-success');\n      }\n    }\n  }\n  \n  Module.prototype.isValid = function() {\n    // regular field\n    if ( this.elementType != 'password' ) {\n      return this.element.checkValidity();\n    }\n    \n    // password\n    return this.validatePassword().isValid;\n  };\n  \n  Module.prototype.validatePassword = function() {\n    var minLength = /^[\\s\\S]{8,}$/;\n    var upper = /[A-Z]/;\n    var lower = /[a-z]/;\n    var number = /[0-9]/;\n    var special = /[ !\"#$%&'()*+,\\-./:;<=>?@[\\\\\\]^_`{|}~]/;\n    var password = this.$element.val();\n    var result = {};\n    \n    result.conditions = {};\n    result.isValid = true;\n    \n    result.conditions.minLength = minLength.test(password) ? true : false;\n    result.conditions.upper = upper.test(password) ? true : false;\n    result.conditions.lower = lower.test(password) ? true : false;\n    result.conditions.number = number.test(password) ? true : false;\n    result.conditions.special = special.test(password) ? true : false;\n    \n    for (var key in result.conditions) {\n      if( result.conditions[key] === false ) result.isValid = false;\n    }\n    \n    if (result.isValid) {\n      this.element.setCustomValidity('');\n    } else {\n      this.element.setCustomValidity('invalid');\n    }\n    \n    \n    \n    return result;\n  };\n  \n  Module.prototype.cleanUp = function() {\n    this.$helpBlock.addClass('hidden').html();\n    this.$parent.removeClass('has-error');\n  };\n  \n  Module.prototype.showError = function() {\n    var message = this.getErrorMessage();\n    \n    this.$parent.addClass('has-error');\n    this.$helpBlock.removeClass('hidden').html(message);\n  };\n  \n  Module.prototype.getErrorMessage = function() {\n    var states = this.element.validity;\n    \n    for (var key in states) {\n      if ( states[key] ) {\n        return this.formatMessage(key);\n      }\n    }\n    \n    return false;\n  };\n  \n  Module.prototype.formatMessage = function(key) {\n    var message = this.options.messages[key];\n    \n    if (key == 'tooShort' || key == 'tooLong') {\n      message = message.replace('%N%', this.$element.attr('minlength'));\n    }\n    \n    return message;\n  };\n  \n  $.fn[moduleName] = function (option) {\n    return this.each(function () {\n      var $this   = $(this);\n      var data    = $this.data( 'module_' + moduleName );\n      var options = $.extend({}, $.fn[moduleName].defaults, $this.data(), typeof option == 'object' && option);\n      \n      if (!data) $this.data( 'module_' + moduleName, ( data = new Module(this, options) ) );\n      if (typeof option == 'string') data[option]();\n    });\n  };\n\n  $.fn[moduleName].defaults = {\n    messages: {\n      valueMissing: 'The field is required',\n      tooShort: 'At least %N% characters',\n      password: {\n        minlength: 'At least 8 characters long',\n        upper: 'Contains uppercase letters',\n        lower: 'Contains lowercase letters',\n        number: 'Contains numbers',\n        special: 'Contains punctuation'\n      }\n    }\n  };\n\n}(jQuery);","+function ($) {\n\n  $('#regName').validate({\n    messages: {\n      valueMissing: 'We really need your name, mate',\n      tooShort: 'The name is too short, bro (at least %N% characters)'\n    }\n  });\n  \n  $('#regEmail').validate({\n    messages: {\n      valueMissing: 'What if it is an emergency?',\n      typeMismatch: 'It doesn\\'t look like a valid email'\n    }\n  });\n  \n  $('#regPwd').validate();\n  \n}(jQuery);"],"sourceRoot":"/source/"}